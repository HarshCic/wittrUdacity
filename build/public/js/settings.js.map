{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/simple-transition/index.js","public/js/settings/TestController.js","public/js/settings/index.js","public/js/settings/mdl/textfield.js","public/js/settings/tests/WindowMessenger.js","public/js/settings/tests/index.js","public/js/settings/views/spinner.js","public/js/utils/parseHTML.js"],"names":[],"mappings":"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","file":"settings.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = function transition(el, obj, duration, easing) {\n  return new Promise(function(resolve, reject) {\n    if (obj.transform) {\n      obj['-webkit-transform'] = obj.transform;\n    }\n\n    var objKeys = Object.keys(obj);\n\n    if (duration) {\n      el.style.transitionProperty = objKeys.join();\n      if (easing) el.style.transitionTimingFunction = easing;\n      el.style.transitionDuration = duration + 's';\n      el.offsetLeft; // style recalc\n\n      el.addEventListener('transitionend', function te() {\n        el.style.transitionProperty = '';\n        el.style.transitionTimingFunction = '';\n        el.style.transitionDuration = '';\n        resolve();\n        el.removeEventListener('transitionend', te);\n      });\n    }\n    else {\n      resolve();\n    }\n\n    objKeys.forEach(function(key) {\n      el.style.setProperty(key, obj[key]);\n    });\n  });\n};\n","import MaterialTextfield from './mdl/textfield';\r\nimport simpleTransition from 'simple-transition';\r\nimport SpinnerView from './views/spinner';\r\nimport tests from './tests';\r\n\r\nexport default class TestController {\r\n  constructor(container) {\r\n    this._memeContainer = container.querySelector('.meme-container');\r\n    this._memeImgContainer = container.querySelector('.meme-img-container');\r\n    this._feedbackText = container.querySelector('.feedback-text');\r\n    this._form = container.querySelector('.test-form');\r\n    this._currentMemeImg = null;\r\n    this._spinner = new SpinnerView();\r\n\r\n    this._memeContainer.appendChild(this._spinner.container);\r\n\r\n    new MaterialTextfield(container.querySelector('.mdl-js-textfield'));\r\n    this._form.addEventListener('submit', e => this._onSubmit(e));\r\n    this._form.testId.addEventListener('input', e => this._onInput(e));\r\n\r\n  }\r\n\r\n  _onInput(event) {\r\n    if (!this._form.testId.value.trim()) {\r\n      this._removeCurrentFeedback();\r\n    }\r\n  }\r\n\r\n  _onSubmit(event) {\r\n    event.preventDefault();\r\n    const val = this._form.testId.value.trim().toLowerCase();\r\n    this._form.testId.blur();\r\n    \r\n    this._removeCurrentFeedback();\r\n    simpleTransition(this._memeContainer, {opacity: 1}, 0.3);\r\n    this._spinner.show(800);\r\n\r\n    if (!tests[val]) {\r\n      this._displayFeedback(\"Didn't recognise that test ID\", 'mistake.gif', false);\r\n      return;\r\n    }\r\n\r\n    tests[val]().then(args => {\r\n      this._displayFeedback(...args);\r\n    }).catch(err => {\r\n      this._displayFeedback(\"Oh dear, something went really wrong\", 'mistake.gif', false);\r\n      throw err;\r\n    });\r\n  }\r\n\r\n  _removeCurrentFeedback() {\r\n    this._feedbackText.textContent = '';\r\n    this._memeContainer.style.opacity = '';\r\n    this._spinner.hide();\r\n\r\n    if (this._currentMemeImg) {\r\n      URL.revokeObjectURL(this._currentMemeImg.href);\r\n      this._memeImgContainer.removeChild(this._currentMemeImg);\r\n      this._currentMemeImg = undefined;\r\n    }\r\n  }\r\n\r\n  _displayFeedback(text, url, winning) {\r\n    this._feedbackText.textContent = text;\r\n    this._spinner.hide();\r\n\r\n    if (winning) {\r\n      this._feedbackText.classList.remove('fail');\r\n    }\r\n    else {\r\n      this._feedbackText.classList.add('fail');\r\n    }\r\n\r\n    return fetch(`/imgs/test-memes/${url}`).then(r => r.blob()).then(blob => {\r\n      this._currentMemeImg = new Image();\r\n      // hahaha, yes, I know\r\n      this._currentMemeImg.src = URL.createObjectURL(blob.slice(1));\r\n      this._memeImgContainer.appendChild(this._currentMemeImg);\r\n    });\r\n  }\r\n}","import TestController from './TestController';\r\n\r\nconst settingsForm = document.querySelector('.settings-form');\r\n\r\nsettingsForm.addEventListener('change', () => {\r\n  fetch(settingsForm.action, {\r\n    method: settingsForm.method,\r\n    body: new FormData(settingsForm)\r\n  });\r\n});\r\n\r\nif (!self.fetch) {\r\n  document.querySelector('.warning').style.display = 'block';\r\n}\r\n\r\nnew TestController(document.querySelector('.tester'));","/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Class constructor for Textfield MDL component.\r\n * Implements MDL component design pattern defined at:\r\n * https://github.com/jasonmayes/mdl-component-design-pattern\r\n *\r\n * @constructor\r\n * @param {HTMLElement} element The element that will be upgraded.\r\n */\r\nexport default function MaterialTextfield(element) {\r\n  this.element_ = element;\r\n  this.maxRows = this.Constant_.NO_MAX_ROWS;\r\n  // Initialize instance.\r\n  this.init();\r\n}\r\n\r\n/**\r\n * Store constants in one place so they can be updated easily.\r\n *\r\n * @enum {string | number}\r\n * @private\r\n */\r\nMaterialTextfield.prototype.Constant_ = {\r\n  NO_MAX_ROWS: -1,\r\n  MAX_ROWS_ATTRIBUTE: 'maxrows'\r\n};\r\n\r\n/**\r\n * Store strings for class names defined by this component that are used in\r\n * JavaScript. This allows us to simply change it in one place should we\r\n * decide to modify at a later date.\r\n *\r\n * @enum {string}\r\n * @private\r\n */\r\nMaterialTextfield.prototype.CssClasses_ = {\r\n  LABEL: 'mdl-textfield__label',\r\n  INPUT: 'mdl-textfield__input',\r\n  IS_DIRTY: 'is-dirty',\r\n  IS_FOCUSED: 'is-focused',\r\n  IS_DISABLED: 'is-disabled',\r\n  IS_INVALID: 'is-invalid',\r\n  IS_UPGRADED: 'is-upgraded'\r\n};\r\n\r\n/**\r\n * Handle input being entered.\r\n *\r\n * @param {Event} event The event that fired.\r\n * @private\r\n */\r\nMaterialTextfield.prototype.onKeyDown_ = function(event) {\r\n  var currentRowCount = event.target.value.split('\\n').length;\r\n  if (event.keyCode === 13) {\r\n    if (currentRowCount >= this.maxRows) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Handle focus.\r\n *\r\n * @param {Event} event The event that fired.\r\n * @private\r\n */\r\nMaterialTextfield.prototype.onFocus_ = function(event) {\r\n  this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\r\n};\r\n\r\n/**\r\n * Handle lost focus.\r\n *\r\n * @param {Event} event The event that fired.\r\n * @private\r\n */\r\nMaterialTextfield.prototype.onBlur_ = function(event) {\r\n  this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\r\n};\r\n\r\n/**\r\n * Handle reset event from out side.\r\n *\r\n * @param {Event} event The event that fired.\r\n * @private\r\n */\r\nMaterialTextfield.prototype.onReset_ = function(event) {\r\n  this.updateClasses_();\r\n};\r\n\r\n/**\r\n * Handle class updates.\r\n *\r\n * @private\r\n */\r\nMaterialTextfield.prototype.updateClasses_ = function() {\r\n  this.checkDisabled();\r\n  this.checkValidity();\r\n  this.checkDirty();\r\n};\r\n\r\n// Public methods.\r\n\r\n/**\r\n * Check the disabled state and update field accordingly.\r\n *\r\n * @public\r\n */\r\nMaterialTextfield.prototype.checkDisabled = function() {\r\n  if (this.input_.disabled) {\r\n    this.element_.classList.add(this.CssClasses_.IS_DISABLED);\r\n  } else {\r\n    this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\r\n  }\r\n};\r\nMaterialTextfield.prototype['checkDisabled'] =\r\n    MaterialTextfield.prototype.checkDisabled;\r\n\r\n/**\r\n * Check the validity state and update field accordingly.\r\n *\r\n * @public\r\n */\r\nMaterialTextfield.prototype.checkValidity = function() {\r\n  if (this.input_.validity) {\r\n    if (this.input_.validity.valid) {\r\n      this.element_.classList.remove(this.CssClasses_.IS_INVALID);\r\n    } else {\r\n      this.element_.classList.add(this.CssClasses_.IS_INVALID);\r\n    }\r\n  }\r\n};\r\nMaterialTextfield.prototype['checkValidity'] =\r\n    MaterialTextfield.prototype.checkValidity;\r\n\r\n/**\r\n * Check the dirty state and update field accordingly.\r\n *\r\n * @public\r\n */\r\nMaterialTextfield.prototype.checkDirty = function() {\r\n  if (this.input_.value && this.input_.value.length > 0) {\r\n    this.element_.classList.add(this.CssClasses_.IS_DIRTY);\r\n  } else {\r\n    this.element_.classList.remove(this.CssClasses_.IS_DIRTY);\r\n  }\r\n};\r\nMaterialTextfield.prototype['checkDirty'] =\r\n    MaterialTextfield.prototype.checkDirty;\r\n\r\n/**\r\n * Disable text field.\r\n *\r\n * @public\r\n */\r\nMaterialTextfield.prototype.disable = function() {\r\n  this.input_.disabled = true;\r\n  this.updateClasses_();\r\n};\r\nMaterialTextfield.prototype['disable'] = MaterialTextfield.prototype.disable;\r\n\r\n/**\r\n * Enable text field.\r\n *\r\n * @public\r\n */\r\nMaterialTextfield.prototype.enable = function() {\r\n  this.input_.disabled = false;\r\n  this.updateClasses_();\r\n};\r\nMaterialTextfield.prototype['enable'] = MaterialTextfield.prototype.enable;\r\n\r\n/**\r\n * Update text field value.\r\n *\r\n * @param {string} value The value to which to set the control (optional).\r\n * @public\r\n */\r\nMaterialTextfield.prototype.change = function(value) {\r\n\r\n  if (value) {\r\n    this.input_.value = value;\r\n  } else {\r\n    this.input_.value = '';\r\n  }\r\n  this.updateClasses_();\r\n};\r\nMaterialTextfield.prototype['change'] = MaterialTextfield.prototype.change;\r\n\r\n/**\r\n * Initialize element.\r\n */\r\nMaterialTextfield.prototype.init = function() {\r\n\r\n  if (this.element_) {\r\n    this.label_ = this.element_.querySelector('.' + this.CssClasses_.LABEL);\r\n    this.input_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\r\n\r\n    if (this.input_) {\r\n      if (this.input_.hasAttribute(\r\n            /** @type {string} */ (this.Constant_.MAX_ROWS_ATTRIBUTE))) {\r\n        this.maxRows = parseInt(this.input_.getAttribute(\r\n            /** @type {string} */ (this.Constant_.MAX_ROWS_ATTRIBUTE)), 10);\r\n        if (isNaN(this.maxRows)) {\r\n          this.maxRows = this.Constant_.NO_MAX_ROWS;\r\n        }\r\n      }\r\n\r\n      this.boundUpdateClassesHandler = this.updateClasses_.bind(this);\r\n      this.boundFocusHandler = this.onFocus_.bind(this);\r\n      this.boundBlurHandler = this.onBlur_.bind(this);\r\n      this.boundResetHandler = this.onReset_.bind(this);\r\n      this.input_.addEventListener('input', this.boundUpdateClassesHandler);\r\n      this.input_.addEventListener('focus', this.boundFocusHandler);\r\n      this.input_.addEventListener('blur', this.boundBlurHandler);\r\n      this.input_.addEventListener('reset', this.boundResetHandler);\r\n\r\n      if (this.maxRows !== this.Constant_.NO_MAX_ROWS) {\r\n        // TODO: This should handle pasting multi line text.\r\n        // Currently doesn't.\r\n        this.boundKeyDownHandler = this.onKeyDown_.bind(this);\r\n        this.input_.addEventListener('keydown', this.boundKeyDownHandler);\r\n      }\r\n\r\n      this.updateClasses_();\r\n      this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Downgrade the component\r\n *\r\n * @private\r\n */\r\nMaterialTextfield.prototype.mdlDowngrade_ = function() {\r\n  this.input_.removeEventListener('input', this.boundUpdateClassesHandler);\r\n  this.input_.removeEventListener('focus', this.boundFocusHandler);\r\n  this.input_.removeEventListener('blur', this.boundBlurHandler);\r\n  this.input_.removeEventListener('reset', this.boundResetHandler);\r\n  if (this.boundKeyDownHandler) {\r\n    this.input_.removeEventListener('keydown', this.boundKeyDownHandler);\r\n  }\r\n};","export default class WindowMessenger {\r\n  constructor(url) {\r\n    this._requestId = 0;\r\n    \r\n    this._iframe = document.createElement('iframe');\r\n    this._iframe.className = 'hidden-tester';\r\n    this._ready = new Promise((resolve, reject) => {\r\n      const listener = e => {\r\n        resolve();\r\n        this._iframe.removeEventListener('load', listener);\r\n        this._iframe.removeEventListener('error', errorListener);\r\n      };\r\n      const errorListener = e => {\r\n        reject(Error(\"Iframe load failed\"));\r\n        this._iframe.removeEventListener('load', listener);\r\n        this._iframe.removeEventListener('error', errorListener);\r\n      };\r\n      this._iframe.addEventListener('load', listener);\r\n      this._iframe.addEventListener('error', errorListener);\r\n      this._iframe.src = url;\r\n    });\r\n    document.body.appendChild(this._iframe);\r\n\r\n    this._targetOrigin = new URL(url).origin;\r\n\r\n    this._windowListener = event => this._onMessage(event);\r\n    self.addEventListener('message', this._windowListener);\r\n\r\n    // message jobs awaiting response {callId: [resolve, reject]}\r\n    this._pending = {};\r\n  }\r\n\r\n  destruct() {\r\n    document.body.removeChild(this._iframe);\r\n    self.removeEventListener('message', this._windowListener);\r\n  }\r\n\r\n  _onMessage(event) {\r\n    if (event.origin != this._targetOrigin) return;\r\n\r\n    if (!event.data.id) {\r\n      console.log(\"Unexpected message\", event);\r\n      return;\r\n    }\r\n\r\n    var resolver = this._pending[event.data.id];\r\n\r\n    if (!resolver) {\r\n      console.log(\"No resolver for\", event);\r\n      return;\r\n    }\r\n\r\n    delete this._pending[event.data.id];\r\n\r\n    if (event.data.error) {\r\n      resolver[1](new Error(event.data.error));\r\n      return;\r\n    }\r\n\r\n    resolver[0](event.data.result);\r\n  }\r\n\r\n  message(message) {\r\n    return this._ready.then(_ => {\r\n      const requestId = ++this._requestId;\r\n      message.id = requestId;\r\n\r\n      return new Promise((resolve, reject) => {\r\n        this._pending[requestId] = [resolve, reject];\r\n        this._iframe.contentWindow.postMessage(message, this._targetOrigin);\r\n      });\r\n    });\r\n  }\r\n}\r\n","import WindowMessenger from './WindowMessenger';\r\n\r\nconst appOrigin = new URL(location.href);\r\nappOrigin.port = self.config.appPort;\r\nconst executorUrl = new URL('/remote?bypass-sw', appOrigin);\r\n\r\nfunction remoteEval(js) {\r\n  const messenger = new WindowMessenger(executorUrl);\r\n  let error;\r\n\r\n  if (typeof js === 'function') {\r\n    js = '(' + js.toString() + ')()';\r\n  }\r\n\r\n  return figureOutConnectionType().then(type => {\r\n    if (type === 'offline') return [\"Looks like the server is offline\", 'sad.gif', false];\r\n\r\n    return messenger.message({\r\n      eval: js\r\n    }).catch(err => {\r\n      error = err;\r\n    }).then(val => {\r\n      messenger.destruct();\r\n      if (error) throw error;\r\n      return val;\r\n    });\r\n  });\r\n\r\n}\r\n\r\nfunction figureOutConnectionType() {\r\n  const start = performance.now();\r\n\r\n  return Promise.race([\r\n    fetch(new URL('/ping', appOrigin)),\r\n    new Promise(r => setTimeout(r, 4000))\r\n  ]).then(_ => {\r\n    const duration = performance.now() - start;\r\n\r\n    if (duration < 3000) {\r\n      return 'perfect';\r\n    }\r\n    if (duration < 3500) {\r\n      return 'slow';\r\n    }\r\n    return 'lie-fi';\r\n  }, _ => {\r\n    return 'offline';\r\n  });\r\n}\r\n\r\nexport default {\r\n  demo() {\r\n    return Promise.resolve([\"Yep, the demo's working!\", 'demo.gif', true]);\r\n  },\r\n  offline() {\r\n    return figureOutConnectionType().then(type => {\r\n      if (type == 'offline') {\r\n        return [\"Yep! The server is totally dead!\", '1.gif', true];\r\n      }\r\n      return [\"Hmm, no, looks like the server is still up\", 'nope.gif', false];\r\n    });\r\n  },\r\n  ['lie-fi']() {\r\n    return figureOutConnectionType().then(type => {\r\n      switch(type) {\r\n        case \"lie-fi\":\r\n          return [\"Yeeeep, that's lie-fi alright.\", '2.gif', true];\r\n        case \"offline\":\r\n          return [\"Hmm, no, looks like the server is down.\", 'nope.gif', false];\r\n        default:\r\n          return [\"The server responded way too fast for lie-fi.\", 'not-quite.gif', false];\r\n      }\r\n    });\r\n  },\r\n  registered() {\r\n    return remoteEval(function() {\r\n      if (navigator.serviceWorker.controller) return [\"Service worker successfully registered!\", '3.gif', true];\r\n      return [\"Doesn't look like there's a service worker registered :(\", 'nope.gif', false];\r\n    });\r\n  },\r\n  ['sw-waiting']() {\r\n    return remoteEval(function() {\r\n      return navigator.serviceWorker.getRegistration('/').then(reg => {\r\n        if (!reg) return [\"Doesn't look like there's a service worker registered at all!\", 'sad.gif', false];\r\n        if (!reg.waiting) return [\"There's no service worker waiting\", 'nope.gif', false];\r\n        return [\"Yey! There's a service worker waiting!\", \"4.gif\", true];\r\n      });\r\n    });\r\n  },\r\n  ['sw-active']() {\r\n    return remoteEval(function() {\r\n      return navigator.serviceWorker.getRegistration('/').then(reg => {\r\n        if (!reg) return [\"Doesn't look like there's a service worker registered at all!\", 'sad.gif', false];\r\n        if (reg.waiting) return [\"There's still a service worker waiting\", 'nope.gif', false];\r\n        return [\"No service worker waiting! Yay!\", \"5.gif\", true];\r\n      });\r\n    });\r\n  },\r\n  ['html-response']() {\r\n    return remoteEval(function() {\r\n      return fetch('/').then(response => {\r\n        const type = response.headers.get('content-type');\r\n\r\n        if (!type || (type.toLowerCase() != 'text/html' && !type.toLowerCase().startsWith('text/html'))) {\r\n          return [\"The response doesn't have the 'Content-Type: text/html' header\", 'nope.gif', false];\r\n        }\r\n\r\n        return response.text().then(text => new DOMParser().parseFromString(text, 'text/html')).then(doc => {\r\n          if (doc.body.querySelector('.a-winner-is-me')) {\r\n            return [\"Custom HTML response found! Yay!\", \"6.gif\", true];\r\n          }\r\n          return [\"Can't find an element with class 'a-winner-is-me'\", 'nope.gif', false];\r\n        });\r\n      });\r\n    });\r\n  },\r\n  ['gif-response']() {\r\n    return remoteEval(function() {\r\n      return fetch('/').then(response => {\r\n        const type = response.headers.get('content-type');\r\n\r\n        if (!type || !type.toLowerCase().startsWith('text/html')) {\r\n          return [\"Looks like it isn't just URLs ending with .jpg that are being intercepted\", 'not-quite.gif', false];\r\n        }\r\n\r\n        return fetch('/blah.jpg').then(response => {\r\n          const type = response.headers.get('content-type');\r\n\r\n          if (!type || !type.toLowerCase().startsWith('image/gif')) {\r\n            return [\"Doesn't look like urls ending .jpg are getting a gif in response\", 'no-cry.gif', false];\r\n          }\r\n\r\n          return [\"Images are being intercepted!\", \"7.gif\", true];\r\n        })\r\n      });\r\n    })\r\n  },\r\n  ['gif-404']() {\r\n    return remoteEval(function() {\r\n      return Promise.all([\r\n        fetch('/'),\r\n        fetch('/imgs/dr-evil.gif?bypass-sw'),\r\n        fetch('/' + Math.random())\r\n      ]).then(responses => {\r\n        const pageType = responses[0].headers.get('content-type');\r\n\r\n        if (!pageType || !pageType.toLowerCase().startsWith('text/html')) {\r\n          return [\"Looks like non-404 pages are getting the gif too\", 'not-quite.gif', false];\r\n        }\r\n\r\n        const type = responses[2].headers.get('content-type');\r\n\r\n        if (!type || !type.toLowerCase().startsWith('image/gif')) {\r\n          return [\"Doesn't look like 404 responses are getting a gif in return\", 'nope.gif', false];\r\n        }\r\n\r\n        return Promise.all(\r\n          responses.slice(1).map(r => r.arrayBuffer().then(b => new Uint8Array(b)))\r\n        ).then(arrays => {\r\n          const itemsToCheck = 2000;\r\n          const a1 = arrays[0];\r\n          const a2 = arrays[1];\r\n\r\n          for (let i = 0; i < itemsToCheck; i++) {\r\n            if (a1[i] !== a2[i]) {\r\n              return [\"Doesn't look like 404 responses are getting the dr-evil gif in return\", 'not-quite.gif', false];\r\n            }\r\n          }\r\n          return [\"Yay! 404 pages get gifs!\", \"8.gif\", true];\r\n        })\r\n      })\r\n    });\r\n  },\r\n  ['install-cached']() {\r\n    return remoteEval(function() {\r\n      const expectedUrls = [\r\n        '/',\r\n        '/js/main.js',\r\n        '/css/main.css',\r\n        '/imgs/icon.png',\r\n        'https://fonts.gstatic.com/s/roboto/v15/2UX7WLTfW3W8TclTUvlFyQ.woff',\r\n        'https://fonts.gstatic.com/s/roboto/v15/d-6IYplOFocCacKzxwXSOD8E0i7KZn-EPnyo3HZu7kw.woff'\r\n      ].map(url => new URL(url, location).href);\r\n\r\n      return caches.has('wittr-static-v1').then(has => {\r\n        if (!has) return [\"Can't find a cache named wittr-static-v1\", 'nope.gif', false];\r\n\r\n        return caches.open('wittr-static-v1').then(c => c.keys()).then(reqs => {\r\n          const urls = reqs.map(r => r.url);\r\n          const allAccountedFor = expectedUrls.every(url => urls.includes(url));\r\n\r\n          if (allAccountedFor) {\r\n            return [\"Yay! The cache is ready to go!\", \"9.gif\", true];\r\n          }\r\n          return [\"The cache is there, but it's missing some things\", 'not-quite.gif', false];\r\n        });\r\n      })\r\n    });\r\n  },\r\n  ['cache-served']() {\r\n    return remoteEval(function() {\r\n      return Promise.all([\r\n        fetch('/'),\r\n        fetch('/ping').then(r => r.json()).catch(e => ({ok: false}))\r\n      ]).then(responses => {\r\n        const cachedResponse = responses[0];\r\n        const jsonResponse = responses[1];\r\n\r\n        if (!jsonResponse.ok) return [\"Doesn't look like non-cached requests are getting through\", 'not-quite.gif', false];\r\n\r\n        return new Promise(r => setTimeout(r, 2000)).then(_ => fetch('/')).then(response => {\r\n          if (cachedResponse.headers.get('Date') === response.headers.get('Date')) {\r\n            return [\"Yay! Cached responses are being returned!\", \"10.gif\", true];\r\n          }\r\n          return [\"Doesn't look like responses are returned from the cache\", 'nope.gif', false];\r\n        })\r\n      });\r\n    });\r\n  },\r\n  ['new-cache-ready']() {\r\n    return remoteEval(function() {\r\n      return Promise.all([\r\n        caches.has('wittr-static-v1'),\r\n        caches.has('wittr-static-v2')\r\n      ]).then(hasCaches => {\r\n        if (!hasCaches[0]) return [\"Looks like the v1 cache has already gone\", 'sad.gif', false];\r\n        if (!hasCaches[1]) return [\"Can't find the wittr-static-v2 cache\", 'sad.gif', false];\r\n\r\n        return Promise.all(\r\n          ['wittr-static-v1', 'wittr-static-v2'].map(name => {\r\n            return caches.open(name)\r\n              .then(c => c.match('/css/main.css'))\r\n              .then(r => r && r.text())\r\n          })\r\n        ).then(cssTexts => {\r\n          if (!cssTexts[0]) return [\"Can't find CSS in the v1 cache\", 'sad.gif', false];\r\n          if (!cssTexts[1]) return [\"Can't find CSS in the v2 cache\", 'sad.gif', false];\r\n\r\n          if (cssTexts[0] === cssTexts[1]) {\r\n            return [\"There's a new cache, but the CSS looks the same\", 'nope.gif', false];\r\n          }\r\n          return [\"Yay! The new cache is ready, but isn't disrupting current pages\", \"11.gif\", true];\r\n        });\r\n      });\r\n    })\r\n  },\r\n  ['new-cache-used']() {\r\n    return remoteEval(function() {\r\n      return Promise.all([\r\n        caches.has('wittr-static-v1'),\r\n        caches.has('wittr-static-v2')\r\n      ]).then(hasCaches => {\r\n        if (hasCaches[0]) return [\"Looks like the v1 cache is still there\", 'not-quite.gif', false];\r\n        if (!hasCaches[1]) return [\"Can't find the wittr-static-v2 cache\", 'sad.gif', false];\r\n\r\n        return Promise.all([\r\n          fetch('/css/main.css'),\r\n          new Promise(r => setTimeout(r, 2000)).then(_ => fetch('/css/main.css'))\r\n        ]).then(responses => {\r\n          if (responses[0].headers.get('Date') != responses[1].headers.get('Date')) {\r\n            return [\"Doesn't look like the CSS is being served from the cache\", 'mistake.gif', false];\r\n          }\r\n\r\n          return openIframe('/').then(iframe => {\r\n            const win = iframe.contentWindow;\r\n            const doc = win.document;\r\n            const bg = win.getComputedStyle(doc.querySelector('.toolbar')).backgroundColor;\r\n\r\n            if (bg == 'rgb(63, 81, 181)') {\r\n              return [\"Doesn't look like the header color has changed\", 'no-cry.gif', false]; \r\n            }\r\n            return [\"Yay! You safely updated the CSS!\", \"12.gif\", true];\r\n          });\r\n        })\r\n      })\r\n    });\r\n  },\r\n  ['update-notify']() {\r\n    return remoteEval(function() {\r\n      return navigator.serviceWorker.getRegistration().then(reg => {\r\n        if (!reg.waiting) return [\"Doesn't look like there's a waiting worker\", 'nope.gif', false];\r\n\r\n        return openIframe('/').then(iframe => {\r\n          const win = iframe.contentWindow;\r\n          const doc = win.document;\r\n\r\n          return new Promise(r => setTimeout(r, 500)).then(_ => {\r\n            if (doc.querySelector('.toast')) {\r\n              return [\"Yay! There are notifications!\", \"13.gif\", true];\r\n            }\r\n            return [\"Doesn't look like there's a notification being triggered\", 'sad.gif', false];\r\n          })\r\n        });\r\n      });\r\n    })\r\n  },\r\n  ['update-reload']() {\r\n    return remoteEval(function() {\r\n      return navigator.serviceWorker.getRegistration().then(reg => {\r\n        if (!reg.waiting) return [\"Doesn't look like there's a waiting worker\", 'nope.gif', false];\r\n\r\n        return openIframe('/').then(iframe => {\r\n          const win = iframe.contentWindow;\r\n          const doc = win.document;\r\n\r\n          return new Promise(resolve => {\r\n            setTimeout(_ => resolve([\"Didn't detect the page being reloaded :(\", 'sad.gif', false]), 8000);\r\n            iframe.addEventListener('load', _ => {\r\n              resolve([\"Yay! The page reloaded!\", \"14.gif\", true]);\r\n            })\r\n          });\r\n        });\r\n      });\r\n    })\r\n  },\r\n  ['serve-skeleton']() {\r\n    return remoteEval(function() {\r\n      return fetch('/').then(r => r.text()).then(text => {\r\n        if (text.includes('post-content')) {\r\n          return [\"Doesn't look like the page skeleton is being served\", 'nope.gif', false];\r\n        }\r\n\r\n        return fetch('https://google.com/').then(r => r.text()).catch(e => '').then(gText => {\r\n          if (gText == text) {\r\n            return [\"Looks like you're serving the skeleton for https://google.com/ too!\", 'not-quite.gif', false];\r\n          }\r\n          return [\"Yay! The page skeleton is being served!\", \"15.gif\", true];\r\n        });\r\n      });\r\n    });\r\n  },\r\n  ['idb-animal']() {\r\n    return remoteEval(function() {\r\n      return openDb('test-db').then(db => {\r\n        const tx = db.transaction('keyval');\r\n        return tx.objectStore('keyval').get('favoriteAnimal').then(animal => {\r\n          if (!animal) return [\"Can't find favoriteAnimal in keyval\", 'nope.gif', false];\r\n          return [\"Yay! Your favorite animal is \\\"\" + animal + \"\\\"\", \"16.gif\", true];\r\n        })\r\n      }, err => {\r\n        return [\"Couldn't open the test-db database at all :(\", 'sad.gif', false];\r\n      })\r\n    });\r\n  },\r\n  ['idb-age']() {\r\n    return remoteEval(function() {\r\n      return openDb('test-db').then(db => {\r\n        if (!Array.from(db.objectStoreNames).includes('people')) {\r\n          return [\"Can't find the 'people' objectStore\", 'mistake.gif', false]; \r\n        }\r\n\r\n        const tx = db.transaction('people');\r\n        const store = tx.objectStore('people');\r\n\r\n        if (!Array.from(store.indexNames).includes('age')) {\r\n          return [\"Can't find the 'age' index in the 'people' objectStore\", 'sad.gif', false];\r\n        }\r\n\r\n        const index = store.index('age');\r\n\r\n        if (index.keyPath == 'age') {\r\n          return [\"Yay! The age index is working\", \"17.gif\", true];\r\n        }\r\n\r\n        return [\"The age index isn't indexed by age\", 'nope.gif', false];\r\n      }, err => {\r\n        return [\"Couldn't open the test-db database at all :(\", 'sad.gif', false];\r\n      })\r\n    });\r\n  },\r\n  ['idb-store']() {\r\n    return remoteEval(function() {\r\n      return openDb('wittr').then(db => {\r\n        if (!Array.from(db.objectStoreNames).includes('wittrs')) {\r\n          return [\"There isn't a 'wittrs' objectStore\", 'sad.gif', false];\r\n        }\r\n\r\n        const tx = db.transaction('wittrs');\r\n        const store = tx.objectStore('wittrs');\r\n\r\n        if (store.keyPath != 'id') {\r\n          return [\"'wittrs' objectStore doesn't use 'id' as its primary key\", 'nope.gif', false];\r\n        }\r\n\r\n        if (!Array.from(store.indexNames).includes('by-date')) {\r\n          return [\"There isn't a 'by-date' index on the 'wittrs' objectStore\", 'nope.gif', false];\r\n        }\r\n\r\n        const index = store.index('by-date');\r\n\r\n        if (index.keyPath != 'time') {\r\n          return [\"The 'by-date' index isn't using 'time' as its key\", 'nope.gif', false];\r\n        }\r\n\r\n        return store.getAll().then(messages => {\r\n          if (!messages.length) {\r\n            return [\"The objectStore is there, but it's empty\", 'sad.gif', false];\r\n          }\r\n\r\n          const looksMessagey = messages.every(message => {\r\n            return message.id && message.avatar && message.name && message.time && message.body;\r\n          });\r\n\r\n          if (looksMessagey) {\r\n            return [\"The database is set up and populated!\", \"18.gif\", true];\r\n          }\r\n\r\n          return [\"Looks like some incorrect data is in the database\", 'not-quite.gif', false];\r\n        });\r\n      }, () => {\r\n        return [\"Couldn't open the 'wittr' database at all :(\", 'sad.gif', false];\r\n      });\r\n    });\r\n  },\r\n  ['idb-show']() {\r\n    return remoteEval(function() {\r\n      return openDb('wittr').then(db => {\r\n        return openIframe('/?no-socket').then(iframe => {\r\n          const win = iframe.contentWindow;\r\n          const doc = win.document;\r\n\r\n          return new Promise(r => setTimeout(r, 500)).then(() => {\r\n            const times = Array.from(doc.querySelectorAll('.post-content time'));\r\n            if (!times.length) return [\"Page looks empty without the web socket\", 'nope.gif', false];\r\n\r\n            const inOrder = times.map(t => new Date(t.getAttribute('datetime'))).every((time, i, arr) => {\r\n              const nextTime = arr[i+1];\r\n              if (!nextTime) return true;\r\n              return time >= nextTime;\r\n            });\r\n\r\n            if (!inOrder) return [\"So close! But the newest post should appear at the top\", 'not-quite.gif', false];\r\n            return [\"Page populated from IDB!\", \"19.gif\", true];\r\n          });\r\n        });\r\n      }, () => {\r\n        return [\"Couldn't open the 'wittr' database at all :(\", 'sad.gif', false];\r\n      });\r\n    });\r\n  },\r\n  ['idb-clean']() {\r\n    return remoteEval(function() {\r\n      return openDb('wittr').then(db => {\r\n        const tx = db.transaction('wittrs');\r\n        const store = tx.objectStore('wittrs');\r\n\r\n        return store.count().then(num => {\r\n          if (num > 30) {\r\n            return [\"There are more than 30 items in the store\", 'nope.gif', false];\r\n          }\r\n\r\n          if (num < 30) {\r\n            return [\"There are less than 30 items in the store, so it isn't clear if this is working\", 'not-quite.gif', false];\r\n          }\r\n\r\n          return [\"Looks like the database is being cleaned!\", \"20.gif\", true];\r\n        });\r\n      }, () => {\r\n        return [\"Couldn't open the 'wittr' database at all :(\", 'sad.gif', false];\r\n      });\r\n    });\r\n  },\r\n  ['cache-photos']() {\r\n    return remoteEval(function() {\r\n      return caches.has('wittr-content-imgs').then(hasCache => {\r\n        if (!hasCache) return [\"There isn't a 'wittr-content-imgs' cache\", 'sad.gif', false];\r\n\r\n        // clear cache\r\n        return caches.delete('wittr-content-imgs').then(() => {\r\n          const imageUrlSmall = '/photos/4-3087-2918949798-865f134ef3-320px.jpg';\r\n          const imageUrlMedium = '/photos/4-3087-2918949798-865f134ef3-640px.jpg';\r\n\r\n          return fetch(imageUrlMedium).then(medResponse => {\r\n            return new Promise(r => setTimeout(r, 2000))\r\n              .then(() => fetch(imageUrlMedium)).then(anotherMedResponse => {\r\n                if (medResponse.headers.get('Date') != anotherMedResponse.headers.get('Date')) {\r\n                  return [\"Doesn't look like images are being returned from the cache\", 'nope.gif', false];\r\n                }\r\n\r\n                return fetch(imageUrlSmall).then(smallResponse => {\r\n                  return Promise.all([smallResponse.blob(), medResponse.blob()]);\r\n                }).then(blobs => {\r\n                  if (blobs[0].size != blobs[1].size) {\r\n                    return [\"The originally cached image isn't being returned for different sizes\", 'nope.gif', false];\r\n                  }\r\n                  return [\"Photos are being cached and served correctly!\", \"21.gif\", true];\r\n                });\r\n              });\r\n          });\r\n        });\r\n      });\r\n    });\r\n  },\r\n  ['cache-clean']() {\r\n    return remoteEval(function() {\r\n      return caches.open('wittr-content-imgs').then(cache => {\r\n        const imageUrlMedium = '/photos/4-3087-2918949798-865f134ef3-640px.jpg';\r\n\r\n        return fetch(imageUrlMedium).then(r => r.blob()).then(() => new Promise(r => setTimeout(r, 500))).then(() => {\r\n          return cache.match('/photos/4-3087-2918949798-865f134ef3').then(response => {\r\n            if (!response) return [\"Photos aren't appearing in the cache where we'd expect\", 'not-quite.gif', false];\r\n\r\n            const start = Date.now();\r\n\r\n            return Promise.resolve().then(function checkCache() {\r\n              if (Date.now() - start > 8000) {\r\n                return [\"The image cache doesn't seem to be getting cleaned\", 'nope.gif', false]; \r\n              }\r\n\r\n              return cache.match('/photos/4-3087-2918949798-865f134ef3').then(response => {\r\n                if (!response) {\r\n                  return [\"Yay! The image cache is being cleaned!\", '22.gif', true];\r\n                }\r\n                return new Promise(r => setTimeout(r, 100)).then(checkCache);\r\n              });\r\n            });\r\n          });\r\n        });\r\n      });\r\n    });\r\n  },\r\n  ['cache-avatars']() {\r\n    return remoteEval(function() {\r\n      return caches.delete('wittr-content-imgs').then(() => {\r\n        const imageUrlSmall = '/avatars/marc-1x.jpg';\r\n        const imageUrlMedium = '/avatars/marc-2x.jpg';\r\n\r\n        return fetch(imageUrlSmall).then(smallResponse => {\r\n          return new Promise(r => setTimeout(r, 2000))\r\n            .then(() => fetch(imageUrlMedium)).then(medResponse => {\r\n              if (smallResponse.headers.get('Date') != medResponse.headers.get('Date')) {\r\n                return [\"Doesn't look like avatars are being returned from the cache, even if the request is for a different size\", 'nope.gif', false];\r\n              }\r\n\r\n              return new Promise(r => setTimeout(r, 2000)).then(() => fetch(imageUrlMedium)).then(anotherMedResponse => {\r\n                if (medResponse.headers.get('Date') == anotherMedResponse.headers.get('Date')) {\r\n                  return [\"Doesn't look like avatars are being updated after being returned from the cache\", 'nope.gif', false];\r\n                }\r\n                return [\"Avatars are being cached, served and updated correctly!\", \"23.gif\", true];\r\n              });\r\n            });\r\n        });\r\n      });\r\n    });\r\n  }\r\n};","import parseHTML from '../../utils/parseHTML';\r\n\r\nexport default class Spinner {\r\n  constructor() {\r\n    this.container = parseHTML(\r\n      '<div class=\"spinner\">' +\r\n        '<div class=\"spinner-container\">' +\r\n          '<div class=\"spinner-layer\">' +\r\n            '<div class=\"circle-clipper left\">' +\r\n              '<div class=\"circle\"></div>' +\r\n            '</div>' +\r\n            '<div class=\"gap-patch\">' +\r\n              '<div class=\"circle\"></div>' +\r\n            '</div>' +\r\n            '<div class=\"circle-clipper right\">' +\r\n              '<div class=\"circle\"></div>' +\r\n            '</div>' +\r\n          '</div>' +\r\n        '</div>' +\r\n      '</div>' +\r\n    '').firstChild;\r\n\r\n    this._showTimeout = null;\r\n    this.container.style.display = 'none';\r\n\r\n    var animEndListener = event => {\r\n      if (event.target == this.container) {\r\n        this.container.style.display = 'none';\r\n      }\r\n    };\r\n\r\n    this.container.addEventListener('webkitAnimationEnd', animEndListener);\r\n    this.container.addEventListener('animationend', animEndListener);\r\n  }\r\n\r\n  show(delay = 300) {\r\n    clearTimeout(this._showTimeout);\r\n    this.container.style.display = 'none';\r\n    this.container.classList.remove('cooldown');\r\n    this._showTimeout = setTimeout(_ => {\r\n      this.container.style.display = '';\r\n    }, delay);\r\n  }\r\n\r\n  hide() {\r\n    clearTimeout(this._showTimeout);\r\n    this.container.classList.add('cooldown');\r\n  }\r\n}\r\n","var contextRange = document.createRange();\r\ncontextRange.setStart(document.body, 0);\r\n\r\nexport default function strToEls(str) {\r\n  return contextRange.createContextualFragment(str);\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset:utf-8;base64,"}